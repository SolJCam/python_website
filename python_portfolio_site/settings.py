"""
Django settings for python_portfolio_site project.

Generated by 'django-admin startproject' using Django 2.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/

To run Worker locally:
start redis server - 'redis-server /etc/redis/6379.conf'
start worker - python worker.py or rq worker msnbc cnn fox   - if no name options are passed as arguments, will listen to default, resulting in this worker not receiving any jobs.
start dashboard - rq-dashboard
"""


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/
import os
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ['SECRET']
# heroku config:set DJANGO_SETTINGS_MODULE=python_portfolio_site.settings --account <your account name>
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

#To run test_views in interactive interpreter (shell)
ALLOWED_HOSTS = ['127.0.0.1', 'localhost', 'testserver',]

# The below variable is necessary for config['STATIC_ROOT'].        Project paths can be built using os.path.join(BASE_DIR, <filename>)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# To redirect http to https
# SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
# SECURE_SSL_REDIRECT = True

# Application definition
INSTALLED_APPS = [
    "whitenoise.runserver_nostatic",
    'django.contrib.staticfiles',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'main',
    'py_scraper',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # heroku middleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'python_portfolio_site.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        "DIRS": ["personal_portfolio/templates/", "portfolio_projects/templates/"], #should this be ["main/templates/",]?
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'python_portfolio_site.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2', # pip install psycopg2-binary; since updated to older working version of psycopg2=2.7.5
        'NAME': 'projects',
        'USER': 'sol',
        'HOST': '127.0.0.1',
        'PORT': '5432',
    }
}

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": os.environ.get('REDIS_TLS_URL'),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "CONNECTION_POOL_KWARGS": {
                "ssl_cert_reqs": None
            },
        }
    }
}

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD='django.db.models.AutoField'

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# ------------------------------------------------------------------
#                      FOR HEROKU DEPLOYMENT
# ------------------------------------------------------------------
# comment out when working locally

import os, boto3, pdb
import django_heroku
import dj_database_url # configure database - implicitly - using DATABASE_URL environ variable

# from S3 buckets, download google oauth creds for email submisson, dictionary file for dictionary app and staticfiles generated by django collectstatic
# VERY IMPORTANT: refer to environ directory for important details
d = os.path.dirname(__file__) if "__file__" in locals() else os.getcwd()
s3_resource = boto3.resource('s3')
s3_resource.Object("portfolio-assests", os.environ['GOOGLE_OAUTH']).download_file(os.path.join(d, f"../main/{os.environ['GOOGLE_OAUTH']}")) 
s3_resource.Object("portfolio-assests", "dictionary.json").download_file(os.path.join(d, "../main/dictionary.json"))
s3_resource.Object("solstaticfiles", "staticfiles.json").download_file(os.path.join(d, "../staticfiles/staticfiles.json"))

def download_s3_bucket(bucket_name, s3_object, *s3_folders):
    """
    Download the nested folder structer of the flat file s3 bucket
    Note: An entire s3 bucket CAN be downloaded, but requires making changes to the buckets permissions
    Args:
        str       bucket_name     :      the name of the s3 bucket
        array     s3_folder       :      list of folder paths in the s3 bucket
    """
    bucket = s3_object.Bucket(bucket_name)
    for folder in s3_folders:
        for obj in bucket.objects.filter(Prefix=folder):
            bucket_object = s3_object.Object(bucket_name, obj.key)
            s3_dir_tree = obj.key.replace(obj.key.split('/')[-1], "")
            local_dir_tree = os.path.join(d, "../staticfiles/"+s3_dir_tree)
            if not os.path.exists(os.path.dirname(local_dir_tree)):
                os.makedirs(local_dir_tree)
            if obj.key[-1] == '/':
                continue
            bucket_object.download_file(local_dir_tree+obj.key.split('/')[-1])

download_s3_bucket("solstaticfiles", s3_resource, "admin", "assets", "imgs", "main", "masks", "py_scraper")


# Allow all host hosts/domain names for this site
ALLOWED_HOSTS = ['*']

# DATABASES = { 'default' : dj_database_url.config(conn_max_age=600, ssl_require=True)}
db_from_env = dj_database_url.config(conn_max_age=600, ssl_require=True)
DATABASES['default'].update(db_from_env)

# Honor the 'X-Forwarded-Proto' header for request.is_secure()
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Activate Django-Heroku.
django_heroku.settings(locals(), staticfiles=False)

# Simplified static file serving.
# https://warehouse.python.org/project/whitenoise/
# https://whitenoise.readthedocs.io/en/stable/django.html

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = 'static/'
STATICFILES_DIRS = []

# Don't store the original (un-hashed filename) version of static files, to reduce slug size:
# https://whitenoise.readthedocs.io/en/latest/django.html#WHITENOISE_KEEP_ONLY_HASHED_FILES
WHITENOISE_KEEP_ONLY_HASHED_FILES = True

STORAGES = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}